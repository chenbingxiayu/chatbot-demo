# Generated by Django 3.2.4 on 2021-08-07 14:09

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatBotSession',
            fields=[
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('student_netid', models.CharField(max_length=32, null=True)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(null=True)),
                ('is_ployu_student', models.BooleanField()),
                ('language', models.CharField(choices=[('en-us', 'English'), ('zh-hk', '繁體中文')], max_length=8, null=True)),
                ('q1_academic', models.BooleanField(null=True)),
                ('q1_interpersonal_relationship', models.BooleanField(null=True)),
                ('q1_career', models.BooleanField(null=True)),
                ('q1_family', models.BooleanField(null=True)),
                ('q1_mental_health', models.BooleanField(null=True)),
                ('q1_others', models.BooleanField(null=True)),
                ('q2', models.BooleanField(null=True)),
                ('q3', models.CharField(choices=[('rarely', 'Rarely'), ('seldom', 'Seldom'), ('sometimes', 'Sometimes'), ('often', 'Often'), ('always', 'Always')], max_length=32, null=True)),
                ('q4', models.CharField(choices=[('rarely', 'Rarely'), ('seldom', 'Seldom'), ('sometimes', 'Sometimes'), ('often', 'Often'), ('always', 'Always')], max_length=32, null=True)),
                ('q5', models.BooleanField(null=True)),
                ('q6_1', models.BooleanField(null=True)),
                ('q6_2', models.BooleanField(null=True)),
                ('score', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(13)])),
                ('first_option', models.CharField(choices=[('mental_health_101', 'Mental Health 101'), ('make_appointment_with_sao_counsellors', 'Make appointment with SAO counsellors'), ('immediate_contact_with_sao_counsellors', 'Immediate contact with SAO counsellors'), ('immediate_contact_with_polyu_line', 'Immediate contact with PolyU line'), ('online_chat_service', 'Online Chat Service'), ('community_helpline', 'Community Helpline')], max_length=128, null=True)),
                ('feedback_rating', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
            ],
            options={
                'db_table': 'chatbot-session',
            },
        ),
        migrations.CreateModel(
            name='StaffStatus',
            fields=[
                ('staff_netid', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('staff_name', models.CharField(max_length=64)),
                ('staff_role', models.CharField(choices=[('online_triage', 'Online Triage'), ('do', 'DO'), ('counsellor', 'Counsellor'), ('supervisor', 'Supervisor'), ('admin', 'Admin')], max_length=32)),
                ('staff_chat_status', models.CharField(choices=[('available', 'Available'), ('away', 'Away'), ('assigned', 'Assigned'), ('chatting', 'Chatting'), ('offline', 'Offline')], max_length=32)),
                ('status_change_time', models.DateTimeField(auto_now_add=True)),
                ('staff_stream_id', models.CharField(max_length=32, null=True)),
            ],
            options={
                'db_table': 'staff-status',
            },
        ),
        migrations.CreateModel(
            name='StudentChatStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('student_netid', models.CharField(max_length=64, unique=True)),
                ('student_chat_status', models.CharField(choices=[('waiting', 'Waiting'), ('chatting', 'Chatting'), ('assigned', 'Assigned'), ('end', 'End')], max_length=32, null=True)),
                ('chat_request_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_assign_time', models.DateTimeField(default=None, null=True)),
                ('chat_start_time', models.DateTimeField(default=None, null=True)),
                ('is_supervisor_join', models.BooleanField(default=False)),
                ('assigned_counsellor', models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.staffstatus')),
            ],
            options={
                'db_table': 'student-chat-status',
            },
        ),
        migrations.CreateModel(
            name='StudentChatHistory',
            fields=[
                ('session_id', models.AutoField(primary_key=True, serialize=False)),
                ('student_netid', models.CharField(max_length=64)),
                ('student_chat_status', models.CharField(choices=[('waiting', 'Waiting'), ('chatting', 'Chatting'), ('assigned', 'Assigned'), ('end', 'End')], max_length=32, null=True)),
                ('chat_request_time', models.DateTimeField(null=True)),
                ('chat_start_time', models.DateTimeField(default=None, null=True)),
                ('chat_end_time', models.DateTimeField(default=None, null=True)),
                ('is_supervisor_join', models.BooleanField(default=False)),
                ('is_no_show', models.BooleanField(default=False)),
                ('personal_contact_number', models.CharField(max_length=32, null=True)),
                ('emergency_contact_name', models.CharField(max_length=32, null=True)),
                ('relationship', models.CharField(max_length=32, null=True)),
                ('emergency_contact_number', models.CharField(max_length=32, null=True)),
                ('assigned_counsellor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.staffstatus')),
            ],
            options={
                'db_table': 'student-chat-history',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('netid', models.CharField(max_length=30, unique=True, verbose_name='polyU Net ID')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='app admin')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', main.models.UserManager()),
            ],
        ),
    ]
